<?php

namespace Test\w3ocom\HashNamed;

use w3ocom\HashNamed\HashNamed;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2022-08-30 at 10:05:59.
 */
class HashNamedTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var HashNamed
     */
    protected $local_cache_dir;
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $local_cache_dir = "Tests/hash_named_cache";
        $rp = realpath($local_cache_dir . DIRECTORY_SEPARATOR);
        if (empty($rp) && !mkdir($local_cache_dir)) {
            throw new Exception("Can't create hash_named_cache directory for local-cache: $local_cache_dir");
        }
        $this->local_cache_dir = realpath($local_cache_dir);
        $this->object = new HashNamed($this->local_cache_dir);
    }

    /**
     * @covers w3ocom\HashNamed\HashNamed::addRepositories
     */
    public function testAddRepositories() {
        $this->assertEquals(1, $this->object->AddRepositories(['https://w3o.com/hashnamed/']));
        
        $this->expectException(\Exception::class);
        $this->object->AddRepositories([false]);
    }
    
    /**
     * @covers w3ocom\HashNamed\HashNamed::__construct
     */
    public function testConstruct() {
        $obj = new HashNamed($this->local_cache_dir, ['https://w3o.com/hashnamed/']);
        $this->assertIsObject($obj);
        
        // bad path
        $this->expectException(\Exception::class);
        $obj = new HashNamed('not_fund_dir');
    }

    /**
     * @covers w3ocom\HashNamed\HashNamed::installFunction
     */
    public function testInstallFunction() {
        $code = <<<'CODE'
function test($a) {
    return $a + 1;
}
CODE;
        $result = $this->object->installFunction($code);
        $this->assertEquals('\fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $result['call_name']);
        
        $this->expectException(\Exception::class);
        $this->object->installFunction("Bad functoin code {}");
    }

    /**
     * @covers w3ocom\HashNamed\HashNamed::loadHashNamedCode
     */
    public function testLoadHashNamedCode() {
        // loading with hashnamed-name
        $h_arr = $this->object->LoadHashNamedCode('cf9a51c914fd6ef41e06ac4078f05373d000ee0b');
        $this->assertTrue(is_array($h_arr));
        $this->assertEquals('fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['hashnamed_name']);
        $this->assertEquals('\fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['call_name']);
        
        // loading with test-name (will transform from hashnamed to plain-name)
        $h_arr = $this->object->LoadHashNamedCode('cf9a51c914fd6ef41e06ac4078f05373d000ee0b', false);
        $this->assertTrue(is_array($h_arr));
        $this->assertEquals('fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['hashnamed_name']);
        $this->assertEquals('\test', $h_arr['call_name']);
        
        // loading with test-name again (not transform names)
        $h_arr = $this->object->LoadHashNamedCode('cf9a51c914fd6ef41e06ac4078f05373d000ee0b', false);
        $this->assertTrue(is_array($h_arr));
        $this->assertEquals('fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['hashnamed_name']);
        $this->assertEquals('\test', $h_arr['call_name']);
        
        // loading with hashnamed-name (will transform from plain-name to hashnamed)
        $h_arr = $this->object->LoadHashNamedCode('cf9a51c914fd6ef41e06ac4078f05373d000ee0b');
        $this->assertTrue(is_array($h_arr));
        $this->assertEquals('fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['hashnamed_name']);
        $this->assertEquals('\fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['call_name']);
    }

    /**
     * @covers w3ocom\HashNamed\HashNamed::loadFunction
     */
    public function testLoadFunction() {
        // Successful loading:
        $h_arr = $this->object->loadFunction('fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b');
        $this->assertEquals('fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b',$h_arr['hashnamed_name']);
        
        // Try undefined function
        $result = $this->object->loadFunction('fn_a446bf034aa85ff330a58bb97250bc1072269bff');
        $this->assertNull($result);
        
        // Try illegal functoin name
        $this->expectException(\Exception::class);
        $result = $this->object->loadFunction('fn_a446bf034aa85ff330a58bb97250bc1072269bf');
    }

    /**
     * @covers w3ocom\HashNamed\HashNamed::__callStatic
     */
    public function test__callStatic() {
        // success
        $x = HashNamed::fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b(123);
        $this->assertEquals(124, $x);
        
        // install new function
        $h_arr = HashNamed::installFunction("function himars(\$a) { return \$a * 2; }");
        $this->assertEquals('72fc6e9b602b9429345d9900a8ece529694c69b5dd220a03dcc0332e5954f269', $h_arr['hash']);
        $this->assertEquals('himars', $h_arr['name']);
        
        $x = HashNamed::fn_72fc6e9b602b9429345d9900a8ece529694c69b5(50);
        $this->assertEquals(100, $x);
        
        // undefined
        $this->expectException(\Exception::class);
        $x = HashNamed::fn_72fc6e9b602b9429345d9900a8ece529694c69b6(50);
    }

    /**
     * @covers w3ocom\HashNamed\HashNamed::__call
     */
    public function test__call() {
        $x = $this->object->fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b(123);
        $this->assertEquals(124, $x);
    }

}
