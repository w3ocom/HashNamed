<?php
namespace Test\w3ocom\HashNamed;
/*
test1: 1
test2: ABC
test3: AAA
test3: BBB
test3: CCC
: DDD
:EEE
test4: end of header

*/

use w3ocom\HashNamed\HELML;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2022-09-01 at 12:46:54.
 */
class HELMLTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var HELML
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new HELML();
    }
    
    public function getHeaderProvider() {
        return [
//---------
'first' => [
    [
    'test1' => 1,
    'test2' => 'ABC',
    'test3' => ['AAA', 'BBB', 'CCC', 'DDD', 'EEE'],
    'test4' => 'end of header'
    ],
    [],  // fields_arr
    true //get_all_fields
],
//---------
'first_with_null_nokey' => [
    [
    'test1' => 1,
    'test2' => 'ABC',
    'test3' => ['AAA', 'BBB', 'CCC', 'DDD', 'EEE'],
    'test4' => 'end of header',
    'nokey' => null
    ],
    ['nokey'=>0],  // fields_arr
    true //get_all_fields
],
//---------
'get_only_2_fields' => [
    [
    'test1' => 1,
    'test2' => 'ABC',
    ],
    ['test1'=>1, 'test2'=>1],  // fields_arr
    false //get_all_fields
],
//---------
'no_required_field' => [
    NULL,
    ['nofield'=>1],  // fields_arr
    false //get_all_fields
],

        ];
    }

    /**
     * @dataProvider getHeaderProvider
     * @covers w3ocom\HashNamed\HELML::getHeader
     */
    public function testGetHeader($exp_arr, $fields_arr, $get_all_fields) {
        $h_arr = $this->object->getHeader(file_get_contents(__FILE__), $fields_arr, $get_all_fields);
        if (is_array($exp_arr)) {
            $this->assertTrue(is_array($h_arr));
            $this->assertArrayHasKey('_h', $h_arr);
            $this->assertArrayHasKey('0', $h_arr['_h']);
            unset($h_arr['_h']);
        }
        $this->assertEquals($exp_arr, $h_arr);
    }

    /**
     * @covers w3ocom\HashNamed\HELML::getHeader
     */
    public function testGetHeaderNoHeader() {
        $h_arr = $this->object->getHeader("bad data");
        $this->assertNull($h_arr);
    }

    /**
     * @covers w3ocom\HashNamed\HELML::toHELML
     * @todo   Implement testToHELML().
     */
    public function testToHELML() {
        $h_arr = $this->object->ToHELML([
            'test1' => 1,
            'test2' => 'ABC',
            'test3' => ['AAA', 'BBB', 'CCC', 'DDD', 'EEE'],
            'test4' => 'end of header'
        ]);
        $this->assertEquals(
"test1: 1
test2: ABC
test3: AAA
test3: BBB
test3: CCC
test3: DDD
test3: EEE
test4: end of header
", $h_arr);
    }

}
