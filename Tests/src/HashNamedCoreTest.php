<?php

namespace Test\w3ocom\HashNamed;

use w3ocom\HashNamed\HashNamedCore;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2022-08-30 at 10:05:59.
 */
class HashNamedCoreTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var HashNamedCore
     */
    protected $local_cache_dir;
    protected $object;
    
    public string $tst_class = 'w3ocom\HashNamed\HashNamedCore';


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $local_cache_dir = "Tests/hash_named_cache";
        $rp = realpath($local_cache_dir . DIRECTORY_SEPARATOR);
        if (empty($rp) && !mkdir($local_cache_dir)) {
            throw new Exception("Can't create hash_named_cache directory for local-cache: $local_cache_dir");
        }
        $this->local_cache_dir = realpath($local_cache_dir);
        $this->object = new $this->tst_class($this->local_cache_dir);
    }

    /**
     * @covers w3ocom\HashNamed\HashNamedCore::addRepositories
     */
    public function testAddRepositories() {
        $cnt = $this->object->AddRepositories(['https://w3o.com/hashnamed/']);
        $this->assertTrue(is_int($cnt));
        
        $this->expectException(\Exception::class);
        $this->object->AddRepositories([false]);
    }
    
    /**
     * @covers w3ocom\HashNamed\HashNamedCore::__construct
     */
    public function testConstruct() {
        $obj = new HashNamedCore($this->local_cache_dir, ['https://w3o.com/hashnamed/']);
        $this->assertIsObject($obj);
        
        // bad path
        $this->expectException(\Exception::class);
        $obj = new HashNamedCore('not_fund_dir');
    }

    /**
     * @covers w3ocom\HashNamed\HashNamedCore::loadHashNamedCode
     */
    public function testLoadHashNamedCode() {
        // try loading a non-existent hash
        $h_arr = $this->object->LoadHashNamedCode('cf9a51c914fd6ef41e06ac4078f05373d0000000');
        $this->assertNull($h_arr);

        // loading with hashnamed-name
        $h_arr = $this->object->LoadHashNamedCode('cf9a51c914fd6ef41e06ac4078f05373d000ee0b');
        $this->assertTrue(is_array($h_arr));
        $this->assertEquals('fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['hashnamed_name']);
        $this->assertEquals('\fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['call_name']);
        
        // loading with test-name (will transform from hashnamed to plain-name)
        $h_arr = $this->object->LoadHashNamedCode('cf9a51c914fd6ef41e06ac4078f05373d000ee0b', false);
        $this->assertTrue(is_array($h_arr));
        $this->assertEquals('fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['hashnamed_name']);
        $this->assertEquals('\test', $h_arr['call_name']);
        
        // loading with test-name again (not transform names)
        $h_arr = $this->object->LoadHashNamedCode('cf9a51c914fd6ef41e06ac4078f05373d000ee0b', false);
        $this->assertTrue(is_array($h_arr));
        $this->assertEquals('fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['hashnamed_name']);
        $this->assertEquals('\test', $h_arr['call_name']);
        
        // loading with hashnamed-name (will transform from plain-name to hashnamed)
        $h_arr = $this->object->LoadHashNamedCode('cf9a51c914fd6ef41e06ac4078f05373d000ee0b');
        $this->assertTrue(is_array($h_arr));
        $this->assertEquals('fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['hashnamed_name']);
        $this->assertEquals('\fn_cf9a51c914fd6ef41e06ac4078f05373d000ee0b', $h_arr['call_name']);
        
        // try load unexpected type
        $this->expectException(\Exception::class);
        $h_arr = $this->object->LoadHashNamedCode('cf9a51c914fd6ef41e06ac4078f05373d000ee0b', true, 'php-class');
    }
}
